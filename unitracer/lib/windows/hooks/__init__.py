from ..i386 import *
from ctypes import *
from unicorn.x86_const import *
import importlib
import os


class Hook(object):
    def __init__(self, restype, argtypes):
        self.restype = restype
        self.argtypes = argtypes

    def hook(self, ip, sp, ut):
        name = filter(lambda x:x[1]==self, ut.hooks.items())[0][0]
        args = []
        retaddr = ut.getstack(sp)
        idx = 0
        for argtype in self.argtypes:
            val = ut.getstack(sp+idx*(ut.bits/8))
            if argtype in [c_char_p, c_wchar_p]:
                if val == 0:
                    args.append("0x{0:08x}".format(val))
                else:
                    args.append('"{}"'.format(ut.getstr(val)))
            else:
                args.append("0x{0:08x}".format(val))
            idx += 1
        print("Unhooked function: {} ({})".format(name, ', '.join(args)))
        offset = idx*(ut.bits/8)
        # ut.setSP(sp + offset)
        # ut.emu.mem_write(sp + offset, retaddr)


hooks = set(vars().keys())

# default hook types

GetUserNameA = Hook(BOOL, [LPSTR, LPDWORD])
GetUserNameW = Hook(BOOL, [LPWSTR, LPDWORD])
LookupAccountSidA = Hook(BOOL, [LPSTR, PSID, LPSTR, LPDWORD, LPSTR, LPDWORD, LPDWORD])
LookupAccountSidW = Hook(BOOL, [LPSTR, PSID, LPWSTR, LPDWORD, LPWSTR, LPDWORD, LPDWORD])
ConvertSidToStringSidA = Hook(BOOL, [PSID, LPSTR])
ConvertSidToStringSidW = Hook(BOOL, [PSID, LPWSTR])
ConvertStringSidToSidA = Hook(BOOL, [LPSTR, PVOID])
ConvertStringSidToSidW = Hook(BOOL, [LPWSTR, PVOID])
IsValidSid = Hook(BOOL, [PSID])
EqualSid = Hook(BOOL, [PSID, PSID])
GetLengthSid = Hook(DWORD, [PSID])
CopySid = Hook(BOOL, [DWORD, PVOID, PSID])
FreeSid = Hook(PSID, [PSID])
OpenProcessToken = Hook(BOOL, [HANDLE, DWORD, PHANDLE])
OpenThreadToken = Hook(BOOL, [HANDLE, DWORD, BOOL, PHANDLE])
DuplicateToken = Hook(BOOL, [HANDLE, SECURITY_IMPERSONATION_LEVEL, PHANDLE])
DuplicateTokenEx = Hook(BOOL, [HANDLE, DWORD, LPSECURITY_ATTRIBUTES, SECURITY_IMPERSONATION_LEVEL, TOKEN_TYPE, PHANDLE])
IsTokenRestricted = Hook(BOOL, [HANDLE])
LookupPrivilegeValueA = Hook(BOOL, [LPSTR, LPSTR, PLUID])
LookupPrivilegeValueW = Hook(BOOL, [LPWSTR, LPWSTR, PLUID])
LookupPrivilegeNameA = Hook(BOOL, [LPSTR, PLUID, LPSTR, LPDWORD])
LookupPrivilegeNameW = Hook(BOOL, [LPWSTR, PLUID, LPWSTR, LPDWORD])
AdjustTokenPrivileges = Hook(BOOL, [HANDLE, BOOL, LPVOID, DWORD, LPVOID, LPVOID])
GetTokenInformation = Hook(BOOL, [HANDLE, TOKEN_INFORMATION_CLASS, LPVOID, DWORD, PDWORD])
CreateProcessWithLogonW = Hook(BOOL, [LPWSTR, LPWSTR, LPWSTR, DWORD, LPWSTR, LPWSTR, DWORD, LPVOID, LPWSTR, LPVOID, LPPROCESS_INFORMATION])
CreateProcessWithTokenW = Hook(BOOL, [HANDLE, DWORD, LPWSTR, LPWSTR, DWORD, LPVOID, LPWSTR, LPVOID, LPPROCESS_INFORMATION])
CreateProcessAsUserA = Hook(BOOL, [HANDLE, LPSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPSTR, LPVOID, LPPROCESS_INFORMATION])
CreateProcessAsUserW = Hook(BOOL, [HANDLE, LPWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPWSTR, LPVOID, LPPROCESS_INFORMATION])
OpenThreadWaitChainSession = Hook(HWCT, [DWORD, PVOID])
GetThreadWaitChain = Hook(BOOL, [HWCT, LPDWORD, DWORD, DWORD, LPDWORD, PWAITCHAIN_NODE_INFO, LPBOOL])
SaferCreateLevel = Hook(BOOL, [DWORD, DWORD, DWORD, POINTER(SAFER_LEVEL_HANDLE), LPVOID])
SaferComputeTokenFromLevel = Hook(BOOL, [SAFER_LEVEL_HANDLE, HANDLE, PHANDLE, DWORD, LPDWORD])
SaferCloseLevel = Hook(BOOL, [SAFER_LEVEL_HANDLE])
SaferiIsExecutableFileType = Hook(BOOL, [LPWSTR, BOOLEAN])
RegCloseKey = Hook(LONG, [HKEY])
RegConnectRegistryA = Hook(LONG, [LPSTR, HKEY, PHKEY])
RegConnectRegistryW = Hook(LONG, [LPWSTR, HKEY, PHKEY])
RegCreateKeyA = Hook(LONG, [HKEY, LPSTR, PHKEY])
RegCreateKeyW = Hook(LONG, [HKEY, LPWSTR, PHKEY])
RegOpenKeyA = Hook(LONG, [HKEY, LPSTR, PHKEY])
RegOpenKeyW = Hook(LONG, [HKEY, LPWSTR, PHKEY])
RegOpenKeyExA = Hook(LONG, [HKEY, LPSTR, DWORD, REGSAM, PHKEY])
RegOpenKeyExW = Hook(LONG, [HKEY, LPWSTR, DWORD, REGSAM, PHKEY])
RegOpenCurrentUser = Hook(LONG, [REGSAM, PHKEY])
RegOpenUserClassesRoot = Hook(LONG, [HANDLE, DWORD, REGSAM, PHKEY])
RegQueryValueA = Hook(LONG, [HKEY, LPSTR, LPVOID, PLONG])
RegQueryValueW = Hook(LONG, [HKEY, LPWSTR, LPVOID, PLONG])
RegEnumKeyA = Hook(LONG, [HKEY, DWORD, LPSTR, DWORD])
RegEnumKeyW = Hook(LONG, [HKEY, DWORD, LPWSTR, DWORD])
RegDeleteValueA = Hook(LONG, [HKEY, LPSTR])
RegDeleteValueW = Hook(LONG, [HKEY, LPWSTR])
RegDeleteKeyValueA = Hook(LONG, [HKEY, LPSTR, LPSTR])
RegDeleteKeyValueW = Hook(LONG, [HKEY, LPWSTR, LPWSTR])
RegDeleteKeyA = Hook(LONG, [HKEY, LPSTR])
RegDeleteKeyW = Hook(LONG, [HKEY, LPWSTR])
RegDeleteKeyExA = Hook(LONG, [HKEY, LPSTR, REGSAM, DWORD])
RegDeleteKeyExW = Hook(LONG, [HKEY, LPWSTR, REGSAM, DWORD])
RegCopyTreeA = Hook(LONG, [HKEY, LPSTR, HKEY])
RegCopyTreeW = Hook(LONG, [HKEY, LPWSTR, HKEY])
RegDeleteTreeA = Hook(LONG, [HKEY, LPWSTR])
RegDeleteTreeW = Hook(LONG, [HKEY, LPWSTR])
RegFlushKey = Hook(LONG, [HKEY])
CloseServiceHandle = Hook(BOOL, [SC_HANDLE])
OpenSCManagerA = Hook(SC_HANDLE, [LPSTR, LPSTR, DWORD])
OpenSCManagerW = Hook(SC_HANDLE, [LPWSTR, LPWSTR, DWORD])
OpenServiceA = Hook(SC_HANDLE, [SC_HANDLE, LPSTR, DWORD])
OpenServiceW = Hook(SC_HANDLE, [SC_HANDLE, LPWSTR, DWORD])
CreateServiceA = Hook(SC_HANDLE, [SC_HANDLE, LPSTR, LPSTR, DWORD, DWORD, DWORD, DWORD, LPSTR, LPSTR, LPDWORD, LPSTR, LPSTR, LPSTR])
CreateServiceW = Hook(SC_HANDLE, [SC_HANDLE, LPWSTR, LPWSTR, DWORD, DWORD, DWORD, DWORD, LPWSTR, LPWSTR, LPDWORD, LPWSTR, LPWSTR, LPWSTR])
DeleteService = Hook(BOOL, [SC_HANDLE])
GetServiceKeyNameA = Hook(BOOL, [SC_HANDLE, LPSTR, LPSTR, LPDWORD])
GetServiceKeyNameW = Hook(BOOL, [SC_HANDLE, LPWSTR, LPWSTR, LPDWORD])
GetServiceDisplayNameA = Hook(BOOL, [SC_HANDLE, LPSTR, LPSTR, LPDWORD])
GetServiceDisplayNameW = Hook(BOOL, [SC_HANDLE, LPWSTR, LPWSTR, LPDWORD])
StartServiceA = Hook(BOOL, [SC_HANDLE, DWORD, LPVOID])
StartServiceW = Hook(BOOL, [SC_HANDLE, DWORD, LPVOID])
ControlService = Hook(BOOL, [SC_HANDLE, DWORD, LPSERVICE_STATUS])
QueryServiceStatus = Hook(BOOL, [SC_HANDLE, LPSERVICE_STATUS])
QueryServiceStatusEx = Hook(BOOL, [SC_HANDLE, SC_STATUS_TYPE, LPVOID, DWORD, LPDWORD])
EnumServicesStatusA = Hook(BOOL, [SC_HANDLE, DWORD, DWORD, LPVOID, DWORD, LPDWORD, LPDWORD, LPDWORD])
EnumServicesStatusW = Hook(BOOL, [SC_HANDLE, DWORD, DWORD, LPVOID, DWORD, LPDWORD, LPDWORD, LPDWORD])
EnumServicesStatusExA = Hook(BOOL, [SC_HANDLE, SC_ENUM_TYPE, DWORD, DWORD, LPVOID, DWORD, LPDWORD, LPDWORD, LPDWORD, LPSTR])
EnumServicesStatusExW = Hook(BOOL, [SC_HANDLE, SC_ENUM_TYPE, DWORD, DWORD, LPVOID, DWORD, LPDWORD, LPDWORD, LPDWORD, LPWSTR])
GetThreadSelectorEntry = Hook(BOOL, [HANDLE, DWORD, LPLDT_ENTRY])
GetThreadContext = Hook(BOOL, [HANDLE, LPCONTEXT])
SetThreadContext = Hook(BOOL, [HANDLE, LPCONTEXT])
SymCleanup = Hook(BOOL, [HANDLE])
SymRefreshModuleList = Hook(BOOL, [HANDLE])
SymSetParentWindow = Hook(BOOL, [HWND])
SymSetOptions = Hook(DWORD, [DWORD])
SymGetOptions = Hook(DWORD, [])
SymUnloadModule = Hook(BOOL, [HANDLE, DWORD])
SymUnloadModule64 = Hook(BOOL, [HANDLE, DWORD64])
# SymGetModuleInfoW = Hook(BOOL, [HANDLE, DWORD, PIMAGEHLP_MODULEW])
# SymGetModuleInfo64W = Hook(BOOL, [HANDLE, DWORD64, PIMAGEHLP_MODULE64W])
# SymEnumerateModulesW = Hook(BOOL, [HANDLE, PSYM_ENUMMODULES_CALLBACKW, PVOID])
# SymEnumerateModules64W = Hook(BOOL, [HANDLE, PSYM_ENUMMODULES_CALLBACK64W, PVOID])
# SymEnumerateSymbolsW = Hook(BOOL, [HANDLE, ULONG, PSYM_ENUMSYMBOLS_CALLBACKW, PVOID])
# SymEnumerateSymbols64W = Hook(BOOL, [HANDLE, ULONG64, PSYM_ENUMSYMBOLS_CALLBACK64W, PVOID])
UnDecorateSymbolNameA = Hook(DWORD, [LPSTR, LPSTR, DWORD, DWORD])
UnDecorateSymbolNameW = Hook(DWORD, [LPWSTR, LPWSTR, DWORD, DWORD])
SymGetSearchPathW = Hook(BOOL, [HANDLE, LPWSTR, DWORD])
SymSetSearchPathW = Hook(BOOL, [HANDLE, LPWSTR])
SymGetHomeDirectoryA = Hook(LPSTR, [DWORD, LPSTR, SIZE_T])
SymGetHomeDirectoryW = Hook(LPWSTR, [DWORD, LPWSTR, SIZE_T])
SymSetHomeDirectoryA = Hook(LPSTR, [HANDLE, LPSTR])
SymSetHomeDirectoryW = Hook(LPWSTR, [HANDLE, LPWSTR])
# SymFromNameW = Hook(BOOL, [HANDLE, LPWSTR, PSYM_INFOW])
# SymGetSymFromAddr64 = Hook(BOOL, [HANDLE, DWORD64, PDWORD64, PIMAGEHLP_SYMBOL64])
# ImagehlpApiVersionEx = Hook(LPAPI_VERSION, [LPAPI_VERSION])
# StackWalk64 = Hook(BOOL, [DWORD, HANDLE, HANDLE, LPSTACKFRAME64, PVOID,
#         PREAD_PROCESS_MEMORY_ROUTINE64,
#         PFUNCTION_TABLE_ACCESS_ROUTINE64,
#         PGET_MODULE_BASE_ROUTINE64,
#         PTRANSLATE_ADDRESS_ROUTINE64])
GetDC = Hook(HDC, [HWND])
GetWindowDC = Hook(HDC, [HWND])
ReleaseDC = Hook(c_int, [HWND, HDC])
SelectObject = Hook(HGDIOBJ, [HDC, HGDIOBJ])
GetStockObject = Hook(HGDIOBJ, [c_int])
GetObjectType = Hook(DWORD, [HGDIOBJ])
GetObject = Hook(c_int, [HGDIOBJ, c_int, LPVOID])
GetBitmapBits = Hook(LONG, [HBITMAP, LONG, LPVOID])
CreateBitmapIndirect = Hook(HBITMAP, [PBITMAP])
GetLastError = Hook(DWORD, [])
SetLastError = Hook(None, [DWORD])
GetErrorMode = Hook(UINT, [])
SetErrorMode = Hook(UINT, [UINT])
GetThreadErrorMode = Hook(DWORD, [])
SetThreadErrorMode = Hook(BOOL, [DWORD, LPDWORD])
CloseHandle = Hook(BOOL, [HANDLE])
DuplicateHandle = Hook(BOOL, [HANDLE, HANDLE, HANDLE, LPHANDLE, DWORD, BOOL, DWORD])
LocalFree = Hook(HLOCAL, [HLOCAL])
LoadLibraryA = Hook(HMODULE, [LPSTR])
LoadLibraryW = Hook(HMODULE, [LPWSTR])
LoadLibraryExA = Hook(HMODULE, [LPSTR, HANDLE, DWORD])
LoadLibraryExW = Hook(HMODULE, [LPWSTR, HANDLE, DWORD])
GetModuleHandleA = Hook(HMODULE, [LPSTR])
GetModuleHandleW = Hook(HMODULE, [LPWSTR])
FreeLibrary = Hook(BOOL, [HMODULE])
RtlPcToFileHeader = Hook(PVOID, [PVOID, POINTER(PVOID)])
GetHandleInformation = Hook(BOOL, [HANDLE, PDWORD])
SetHandleInformation = Hook(BOOL, [HANDLE, DWORD, DWORD])
QueryFullProcessImageNameA = Hook(BOOL, [HANDLE, DWORD, LPSTR, PDWORD])
QueryFullProcessImageNameW = Hook(BOOL, [HANDLE, DWORD, LPWSTR, PDWORD])
QueryDosDeviceA = Hook(DWORD, [LPSTR, LPSTR, DWORD])
QueryDosDeviceW = Hook(DWORD, [LPWSTR, LPWSTR, DWORD])
MapViewOfFile = Hook(LPVOID, [HANDLE, DWORD, DWORD, DWORD, SIZE_T])
UnmapViewOfFile = Hook(BOOL, [LPVOID])
OpenFileMappingA = Hook(HANDLE, [DWORD, BOOL, LPSTR])
OpenFileMappingW = Hook(HANDLE, [DWORD, BOOL, LPWSTR])
CreateFileMappingA = Hook(HANDLE, [HANDLE, LPVOID, DWORD, DWORD, DWORD, LPSTR])
CreateFileMappingW = Hook(HANDLE, [HANDLE, LPVOID, DWORD, DWORD, DWORD, LPWSTR])
CreateFileA = Hook(HANDLE, [LPSTR, DWORD, DWORD, LPVOID, DWORD, DWORD, HANDLE])
CreateFileW = Hook(HANDLE, [LPWSTR, DWORD, DWORD, LPVOID, DWORD, DWORD, HANDLE])
FlushFileBuffers = Hook(BOOL, [HANDLE])
FlushViewOfFile = Hook(BOOL, [LPVOID, SIZE_T])
SearchPathA = Hook(DWORD, [LPSTR, LPSTR, LPSTR, DWORD, LPSTR, POINTER(LPSTR)])
SetSearchPathMode = Hook(BOOL, [DWORD])
DeviceIoControl = Hook(BOOL, [HANDLE, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPOVERLAPPED])
GetFileInformationByHandle = Hook(BOOL, [HANDLE, LPBY_HANDLE_FILE_INFORMATION])
GetFileInformationByHandleEx = Hook(BOOL, [HANDLE, DWORD, LPVOID, DWORD])
GetFinalPathNameByHandleA = Hook(DWORD, [HANDLE, LPSTR, DWORD, DWORD])
GetFinalPathNameByHandleW = Hook(DWORD, [HANDLE, LPWSTR, DWORD, DWORD])
GetFullPathNameA = Hook(DWORD, [LPSTR, DWORD, LPSTR, POINTER(LPSTR)])
GetFullPathNameW = Hook(DWORD, [LPWSTR, DWORD, LPWSTR, POINTER(LPWSTR)])
GetTempPathA = Hook(DWORD, [DWORD, LPSTR])
GetTempPathW = Hook(DWORD, [DWORD, LPWSTR])
GetTempFileNameA = Hook(UINT, [LPSTR, LPSTR, UINT, LPSTR])
GetTempFileNameW = Hook(UINT, [LPWSTR, LPWSTR, UINT, LPWSTR])
GetCurrentDirectoryA = Hook(DWORD, [DWORD, LPSTR])
GetCurrentDirectoryW = Hook(DWORD, [DWORD, LPWSTR])
# SetConsoleCtrlHandler = Hook(BOOL, [PHANDLER_ROUTINE, BOOL])
GenerateConsoleCtrlEvent = Hook(BOOL, [DWORD, DWORD])
WaitForSingleObject = Hook(DWORD, [HANDLE, DWORD])
WaitForSingleObjectEx = Hook(DWORD, [HANDLE, DWORD, BOOL])
WaitForMultipleObjects = Hook(DWORD, [DWORD, POINTER(HANDLE), BOOL, DWORD])
WaitForMultipleObjectsEx = Hook(DWORD, [DWORD, POINTER(HANDLE), BOOL, DWORD])
CreateMutexA = Hook(HANDLE, [LPVOID, BOOL, LPSTR])
CreateMutexW = Hook(HANDLE, [LPVOID, BOOL, LPWSTR])
OpenMutexA = Hook(HANDLE, [DWORD, BOOL, LPSTR])
OpenMutexW = Hook(HANDLE, [DWORD, BOOL, LPWSTR])
CreateEventA = Hook(HANDLE, [LPVOID, BOOL, BOOL, LPSTR])
CreateEventW = Hook(HANDLE, [LPVOID, BOOL, BOOL, LPWSTR])
OpenEventA = Hook(HANDLE, [DWORD, BOOL, LPSTR])
OpenEventW = Hook(HANDLE, [DWORD, BOOL, LPWSTR])
ReleaseMutex = Hook(BOOL, [HANDLE])
SetEvent = Hook(BOOL, [HANDLE])
ResetEvent = Hook(BOOL, [HANDLE])
PulseEvent = Hook(BOOL, [HANDLE])
WaitForDebugEvent = Hook(DWORD, [LPDEBUG_EVENT, DWORD])
ContinueDebugEvent = Hook(BOOL, [DWORD, DWORD, DWORD])
FlushInstructionCache = Hook(BOOL, [HANDLE, LPVOID, SIZE_T])
DebugActiveProcess = Hook(BOOL, [DWORD])
DebugActiveProcessStop = Hook(BOOL, [DWORD])
CheckRemoteDebuggerPresent = Hook(BOOL, [HANDLE, PBOOL])
DebugSetProcessKillOnExit = Hook(BOOL, [BOOL])
DebugBreakProcess = Hook(BOOL, [HANDLE])
OutputDebugStringA = Hook(None, [LPSTR])
OutputDebugStringW = Hook(None, [LPWSTR])
WriteProcessMemory = Hook(BOOL, [HANDLE, LPVOID, LPVOID, SIZE_T, POINTER(SIZE_T)])
VirtualAllocEx = Hook(LPVOID, [HANDLE, LPVOID, SIZE_T, DWORD, DWORD])
VirtualQueryEx = Hook(SIZE_T, [HANDLE, LPVOID, PMEMORY_BASIC_INFORMATION, SIZE_T])
VirtualProtectEx = Hook(BOOL, [HANDLE, LPVOID, SIZE_T, DWORD, PDWORD])
VirtualFreeEx = Hook(BOOL, [HANDLE, LPVOID, SIZE_T, DWORD])
CreateRemoteThread = Hook(HANDLE, [HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPVOID, LPVOID, DWORD, LPDWORD])
CreateProcessA = Hook(BOOL, [LPSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPSTR, LPVOID, LPPROCESS_INFORMATION])
CreateProcessW = Hook(BOOL, [LPWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPWSTR, LPVOID, LPPROCESS_INFORMATION])
InitializeProcThreadAttributeList = Hook(BOOL, [LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD, PSIZE_T])
UpdateProcThreadAttribute = Hook(BOOL, [LPPROC_THREAD_ATTRIBUTE_LIST, DWORD, DWORD_PTR, PVOID, SIZE_T, PVOID, PSIZE_T])
OpenProcess = Hook(HANDLE, [DWORD, BOOL, DWORD])
OpenThread = Hook(HANDLE, [DWORD, BOOL, DWORD])
ResumeThread = Hook(DWORD, [HANDLE])
TerminateThread = Hook(BOOL, [HANDLE, DWORD])
GetCurrentProcessId = Hook(DWORD, [])
GetCurrentThreadId = Hook(DWORD, [])
GetThreadId = Hook(DWORD, [HANDLE])
GetProcessIdOfThread = Hook(DWORD, [HANDLE])
GetExitCodeProcess = Hook(BOOL, [HANDLE])
GetExitCodeThread = Hook(BOOL, [HANDLE])
GetProcessVersion = Hook(DWORD, [DWORD])
GetPriorityClass = Hook(DWORD, [HANDLE])
SetPriorityClass = Hook(BOOL, [HANDLE, DWORD])
GetProcessPriorityBoost = Hook(BOOL, [HANDLE, PBOOL])
SetProcessPriorityBoost = Hook(BOOL, [HANDLE, BOOL])
GetProcessAffinityMask = Hook(BOOL, [HANDLE, PDWORD_PTR, PDWORD_PTR])
SetProcessAffinityMask = Hook(BOOL, [HANDLE, DWORD_PTR])
CreateToolhelp32Snapshot = Hook(HANDLE, [DWORD, DWORD])
Process32First = Hook(BOOL, [HANDLE, LPPROCESSENTRY32])
Process32Next = Hook(BOOL, [HANDLE, LPPROCESSENTRY32])
Thread32First = Hook(BOOL, [HANDLE, LPTHREADENTRY32])
Thread32Next = Hook(BOOL, [HANDLE, LPTHREADENTRY32])
Module32First = Hook(BOOL, [HANDLE, LPMODULEENTRY32])
Module32Next = Hook(BOOL, [HANDLE, LPMODULEENTRY32])
Heap32First = Hook(BOOL, [LPHEAPENTRY32, DWORD, ULONG_PTR])
Heap32Next = Hook(BOOL, [LPHEAPENTRY32])
Heap32ListFirst = Hook(BOOL, [HANDLE, LPHEAPLIST32])
Heap32ListNext = Hook(BOOL, [HANDLE, LPHEAPLIST32])
Toolhelp32ReadProcessMemory = Hook(BOOL, [DWORD, LPVOID, LPVOID, SIZE_T, POINTER(SIZE_T)])
GetProcessDEPPolicy = Hook(BOOL, [HANDLE, LPDWORD, PBOOL])
GetCurrentProcessorNumber = Hook(DWORD, [])
FlushProcessWriteBuffers = Hook(None, [])
GetGuiResources = Hook(DWORD, [HANDLE, DWORD])
GetProcessHandleCount = Hook(DWORD, [HANDLE, PDWORD])
GetProcessTimes = Hook(BOOL, [HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME])
FileTimeToSystemTime = Hook(BOOL, [LPFILETIME, LPSYSTEMTIME])
GetSystemTimeAsFileTime = Hook(None, [LPFILETIME])
GlobalAddAtomA = Hook(ATOM, [LPSTR])
GlobalAddAtomW = Hook(ATOM, [LPWSTR])
GlobalFindAtomA = Hook(ATOM, [LPSTR])
GlobalFindAtomW = Hook(ATOM, [LPWSTR])
GlobalGetAtomNameA = Hook(UINT, [ATOM, LPSTR, c_int])
GlobalGetAtomNameW = Hook(UINT, [ATOM, LPWSTR, c_int])
Wow64SuspendThread = Hook(DWORD, [HANDLE])
Wow64EnableWow64FsRedirection = Hook(BOOLEAN, [BOOLEAN])
Wow64DisableWow64FsRedirection = Hook(BOOL, [PPVOID])
Wow64RevertWow64FsRedirection = Hook(BOOL, [PVOID])
RtlNtStatusToDosError = Hook(ULONG, [NTSTATUS])
NtSystemDebugControl = Hook(NTSTATUS, [SYSDBG_COMMAND, PVOID, ULONG, PVOID, ULONG, PULONG])
NtQueryInformationProcess = Hook(NTSTATUS, [HANDLE, PROCESSINFOCLASS, PVOID, ULONG, PULONG])
NtQueryInformationThread = Hook(NTSTATUS, [HANDLE, THREADINFOCLASS, PVOID, ULONG, PULONG])
NtQueryInformationFile = Hook(NTSTATUS, [HANDLE, PIO_STATUS_BLOCK, PVOID, ULONG, DWORD])
CsrGetProcessId = Hook(DWORD, [])
EnumDeviceDrivers = Hook(BOOL, [LPVOID, DWORD, LPDWORD])
EnumProcesses = Hook(BOOL, [LPVOID, DWORD, LPDWORD])
EnumProcessModules = Hook(BOOL, [HANDLE, LPVOID, DWORD, LPDWORD])
EnumProcessModulesEx = Hook(BOOL, [HANDLE, LPVOID, DWORD, LPDWORD, DWORD])
GetDeviceDriverBaseNameA = Hook(DWORD, [LPVOID, LPSTR, DWORD])
GetDeviceDriverBaseNameW = Hook(DWORD, [LPVOID, LPWSTR, DWORD])
GetDeviceDriverFileNameA = Hook(DWORD, [LPVOID, LPSTR, DWORD])
GetDeviceDriverFileNameW = Hook(DWORD, [LPVOID, LPWSTR, DWORD])
GetMappedFileNameA = Hook(DWORD, [HANDLE, LPVOID, LPSTR, DWORD])
GetMappedFileNameW = Hook(DWORD, [HANDLE, LPVOID, LPWSTR, DWORD])
GetModuleFileNameExA = Hook(DWORD, [HANDLE, HMODULE, LPSTR, DWORD])
GetModuleFileNameExW = Hook(DWORD, [HANDLE, HMODULE, LPWSTR, DWORD])
GetModuleInformation = Hook(BOOL, [HANDLE, HMODULE, LPMODULEINFO, DWORD])
GetProcessImageFileNameA = Hook(DWORD, [HANDLE, LPSTR, DWORD])
GetProcessImageFileNameW = Hook(DWORD, [HANDLE, LPWSTR, DWORD])
CommandLineToArgvW = Hook(LPVOID, [LPVOID, POINTER(c_int)])
ShellExecuteA = Hook(HINSTANCE, [HWND, LPSTR, LPSTR, LPSTR, LPSTR, INT])
ShellExecuteW = Hook(HINSTANCE, [HWND, LPWSTR, LPWSTR, LPWSTR, LPWSTR, INT])
ShellExecuteExA = Hook(BOOL, [LPSHELLEXECUTEINFO])
ShellExecuteExW = Hook(BOOL, [LPSHELLEXECUTEINFO])
FindExecutableA = Hook(HINSTANCE, [LPSTR, LPSTR, LPSTR])
FindExecutableW = Hook(HINSTANCE, [LPWSTR, LPWSTR, LPWSTR])
SHGetFolderPathA = Hook(HRESULT, [HWND, c_int, HANDLE, DWORD, LPSTR])
SHGetFolderPathW = Hook(HRESULT, [HWND, c_int, HANDLE, DWORD, LPWSTR])
IsUserAnAdmin = Hook(BOOL, [])
IsOS = Hook(BOOL, [DWORD])
PathAddBackslashA = Hook(LPSTR, [LPSTR])
PathAddBackslashW = Hook(LPWSTR, [LPWSTR])
PathAddExtensionA = Hook(BOOL, [LPSTR, LPSTR])
PathAddExtensionW = Hook(BOOL, [LPWSTR, LPWSTR])
PathAppendA = Hook(BOOL, [LPSTR, LPSTR])
PathAppendW = Hook(BOOL, [LPWSTR, LPWSTR])
PathCombineA = Hook(LPSTR, [LPSTR, LPSTR, LPSTR])
PathCombineW = Hook(LPWSTR, [LPWSTR, LPWSTR, LPWSTR])
PathCanonicalizeA = Hook(BOOL, [LPSTR, LPSTR])
PathCanonicalizeW = Hook(BOOL, [LPWSTR, LPWSTR])
PathRelativePathToA = Hook(BOOL, [LPSTR, LPSTR, DWORD, LPSTR, DWORD])
PathRelativePathToW = Hook(BOOL, [LPWSTR, LPWSTR, DWORD, LPWSTR, DWORD])
PathFileExistsA = Hook(BOOL, [LPSTR])
PathFileExistsW = Hook(BOOL, [LPWSTR])
PathFindExtensionA = Hook(LPSTR, [LPSTR])
PathFindExtensionW = Hook(LPWSTR, [LPWSTR])
PathFindFileNameA = Hook(LPSTR, [LPSTR])
PathFindFileNameW = Hook(LPWSTR, [LPWSTR])
PathFindNextComponentA = Hook(LPSTR, [LPSTR])
PathFindNextComponentW = Hook(LPWSTR, [LPWSTR])
PathFindOnPathA = Hook(BOOL, [LPSTR, LPSTR])
PathFindOnPathW = Hook(BOOL, [LPWSTR, LPWSTR])
PathGetArgsA = Hook(LPSTR, [LPSTR])
PathGetArgsW = Hook(LPWSTR, [LPWSTR])
PathIsContentTypeA = Hook(BOOL, [LPSTR, LPSTR])
PathIsContentTypeW = Hook(BOOL, [LPWSTR, LPWSTR])
PathIsDirectoryA = Hook(BOOL, [LPSTR])
PathIsDirectoryW = Hook(BOOL, [LPWSTR])
PathIsDirectoryEmptyA = Hook(BOOL, [LPSTR])
PathIsDirectoryEmptyW = Hook(BOOL, [LPWSTR])
PathIsNetworkPathA = Hook(BOOL, [LPSTR])
PathIsNetworkPathW = Hook(BOOL, [LPWSTR])
PathIsRelativeA = Hook(BOOL, [LPSTR])
PathIsRelativeW = Hook(BOOL, [LPWSTR])
PathIsRootA = Hook(BOOL, [LPSTR])
PathIsRootW = Hook(BOOL, [LPWSTR])
PathIsSameRootA = Hook(BOOL, [LPSTR, LPSTR])
PathIsSameRootW = Hook(BOOL, [LPWSTR, LPWSTR])
PathIsUNCA = Hook(BOOL, [LPSTR])
PathIsUNCW = Hook(BOOL, [LPWSTR])
PathMakePrettyA = Hook(BOOL, [LPSTR])
PathMakePrettyW = Hook(BOOL, [LPWSTR])
PathRenameExtensionA = Hook(BOOL, [LPSTR, LPSTR])
PathRenameExtensionW = Hook(BOOL, [LPWSTR, LPWSTR])
PathUnExpandEnvStringsA = Hook(BOOL, [LPSTR, LPSTR])
PathUnExpandEnvStringsW = Hook(BOOL, [LPWSTR, LPWSTR])
SetLastErrorEx = Hook(None, [DWORD, DWORD])
FindWindowA = Hook(HWND, [LPSTR, LPSTR])
FindWindowW = Hook(HWND, [LPWSTR, LPWSTR])
FindWindowExA = Hook(HWND, [HWND, HWND, LPSTR, LPSTR])
FindWindowExW = Hook(HWND, [HWND, HWND, LPWSTR, LPWSTR])
GetClassNameA = Hook(c_int, [HWND, LPSTR, c_int])
GetClassNameW = Hook(c_int, [HWND, LPWSTR, c_int])
GetWindowTextA = Hook(c_int, [HWND, LPSTR, c_int])
GetWindowTextW = Hook(c_int, [HWND, LPWSTR, c_int])
SetWindowTextA = Hook(BOOL, [HWND, LPSTR])
SetWindowTextW = Hook(BOOL, [HWND, LPWSTR])
GetWindowLongA = Hook(DWORD, [HWND, c_int])
GetWindowLongW = Hook(DWORD, [HWND, c_int])
SetWindowLongA = Hook(DWORD, [HWND, c_int, DWORD])
SetWindowLongW = Hook(DWORD, [HWND, c_int, DWORD])
GetShellWindow = Hook(HWND, [])
GetWindowThreadProcessId = Hook(DWORD, [HWND, LPDWORD])
GetWindow = Hook(HWND, [HWND, UINT])
GetParent = Hook(HWND, [HWND])
GetAncestor = Hook(HWND, [HWND, UINT])
EnableWindow = Hook(BOOL, [HWND, BOOL])
ShowWindow = Hook(BOOL, [HWND, c_int])
ShowWindowAsync = Hook(BOOL, [HWND, c_int])
GetDesktopWindow = Hook(HWND, [])
GetForegroundWindow = Hook(HWND, [])
IsWindow = Hook(BOOL, [HWND])
IsWindowVisible = Hook(BOOL, [HWND])
IsWindowEnabled = Hook(BOOL, [HWND])
IsZoomed = Hook(BOOL, [HWND])
IsIconic = Hook(BOOL, [HWND])
IsChild = Hook(BOOL, [HWND])
RealChildWindowFromPoint = Hook(HWND, [HWND, POINT])
ScreenToClient = Hook(BOOL, [HWND, LPPOINT])
ClientToScreen = Hook(BOOL, [HWND, LPPOINT])
MapWindowPoints = Hook(c_int, [HWND, HWND, LPPOINT, UINT])
SetForegroundWindow = Hook(BOOL, [HWND])
GetWindowPlacement = Hook(BOOL, [HWND, PWINDOWPLACEMENT])
SetWindowPlacement = Hook(BOOL, [HWND, PWINDOWPLACEMENT])
GetWindowRect = Hook(BOOL, [HWND, LPRECT])
GetClientRect = Hook(BOOL, [HWND, LPRECT])
MoveWindow = Hook(BOOL, [HWND, c_int, c_int, c_int, c_int, BOOL])
GetGUIThreadInfo = Hook(BOOL, [DWORD, LPGUITHREADINFO])
EnumWindows = Hook(BOOL, [WNDENUMPROC, LPARAM])
EnumThreadWindows = Hook(BOOL, [DWORD, WNDENUMPROC, LPARAM])
EnumChildWindows = Hook(BOOL, [HWND, WNDENUMPROC, LPARAM])
SendMessageA = Hook(LRESULT, [HWND, UINT, WPARAM, LPARAM])
SendMessageW = Hook(LRESULT, [HWND, UINT, WPARAM, LPARAM])
PostMessageA = Hook(BOOL, [HWND, UINT, WPARAM, LPARAM])
PostMessageW = Hook(BOOL, [HWND, UINT, WPARAM, LPARAM])
PostThreadMessageA = Hook(BOOL, [DWORD, UINT, WPARAM, LPARAM])
PostThreadMessageW = Hook(BOOL, [DWORD, UINT, WPARAM, LPARAM])
SendMessageTimeoutA = Hook(LRESULT, [HWND, UINT, WPARAM, LPARAM, UINT, UINT, PDWORD_PTR])
SendMessageTimeoutW = Hook(LRESULT, [HWND, UINT, WPARAM, LPARAM, UINT, UINT, PDWORD_PTR])
SendNotifyMessageA = Hook(BOOL, [HWND, UINT, WPARAM, LPARAM])
SendNotifyMessageW = Hook(BOOL, [HWND, UINT, WPARAM, LPARAM])
SendDlgItemMessageA = Hook(LRESULT, [HWND, c_int, UINT, WPARAM, LPARAM])
SendDlgItemMessageW = Hook(LRESULT, [HWND, c_int, UINT, WPARAM, LPARAM])
WaitForInputIdle = Hook(DWORD, [HANDLE, DWORD])
RegisterWindowMessageA = Hook(UINT, [LPSTR])
RegisterWindowMessageW = Hook(UINT, [LPWSTR])
RegisterClipboardFormatA = Hook(UINT, [LPSTR])
RegisterClipboardFormatW = Hook(UINT, [LPWSTR])
GetPropA = Hook(HANDLE, [HWND, LPSTR])
GetPropW = Hook(HANDLE, [HWND, LPWSTR])
SetPropA = Hook(BOOL, [HWND, LPSTR, HANDLE])
SetPropW = Hook(BOOL, [HWND, LPWSTR, HANDLE])
RemovePropA = Hook(HANDLE, [HWND, LPSTR])
RemovePropW = Hook(HANDLE, [HWND, LPWSTR])
GetSystemInfo = Hook(None, [LPSYSTEM_INFO])
GetNativeSystemInfo = Hook(None, [LPSYSTEM_INFO])
GetSystemMetrics = Hook(c_int, [c_int])
GetLargePageMinimum = Hook(SIZE_T, [])
GetCurrentProcess = Hook(HANDLE, [])
GetCurrentThread = Hook(HANDLE, [])
IsWow64Process = Hook(BOOL, [HANDLE, PBOOL])
GetVersion = Hook(DWORD, [])
GetProductInfo = Hook(BOOL, [DWORD, DWORD, DWORD, DWORD, PDWORD])
VerifyVersionInfoA = Hook(BOOL, [LPOSVERSIONINFOEXA, DWORD, DWORDLONG])
VerifyVersionInfoW = Hook(BOOL, [LPOSVERSIONINFOEXW, DWORD, DWORDLONG])
VerSetConditionMask = Hook(ULONGLONG, [ULONGLONG, DWORD, BYTE])
GetFileVersionInfoA = Hook(BOOL, [LPSTR, DWORD, DWORD, LPVOID])
GetFileVersionInfoW = Hook(BOOL, [LPWSTR, DWORD, DWORD, LPVOID])
VerQueryValueA = Hook(BOOL, [LPVOID, LPSTR, LPVOID, POINTER(UINT)])
VerQueryValueW = Hook(BOOL, [LPVOID, LPWSTR, LPVOID, POINTER(UINT)])
WTSFreeMemory = Hook(None, [PVOID])
WTSEnumerateProcessesA = Hook(BOOL, [HANDLE, DWORD, DWORD, POINTER(PWTS_PROCESS_INFOA), PDWORD])
WTSEnumerateProcessesW = Hook(BOOL, [HANDLE, DWORD, DWORD, POINTER(PWTS_PROCESS_INFOW), PDWORD])
WTSTerminateProcess = Hook(BOOL, [HANDLE, DWORD, DWORD])
ProcessIdToSessionId = Hook(BOOL, [DWORD, PDWORD])
WTSGetActiveConsoleSessionId = Hook(DWORD, [])


# load defined hooks

for f in filter(lambda x:not os.path.isdir(x), os.listdir(os.path.dirname(__file__))):
    if not f.endswith('.py') or f == '__init__.py':
        continue
    m = importlib.import_module(".".join(['unitracer', 'lib', 'windows', 'hooks', f[:-3]]))
    for n in filter(lambda x:not x[:2] == x[-2:] == '__', dir(m)):
        globals()[n] = Hook(None, None)
        globals()[n].hook = getattr(m, n)


hooks = set(vars().keys()).difference(hooks)
hooks = [_x for _x in hooks if not _x.startswith('_')]
